# -*- coding: utf-8 -*-
"""Trabalhando com Planilha Excel.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1jqt7WvgcJl0FbDViXsPfLGbaKYrDzHcZ

# **Trabalhando com Planilha Excel**
"""

#importando biblioteca

import pandas as pd

#Leitura dos arquivos
df1 = pd.read_excel("/content/sample_data/Aracaju.xlsx")
df2 = pd.read_excel("/content/sample_data/Fortaleza.xlsx")
df3 = pd.read_excel("/content/sample_data/Natal.xlsx")
df4 = pd.read_excel("/content/sample_data/Recife.xlsx")
df5 = pd.read_excel("/content/sample_data/Salvador.xlsx")

#Juntando todos arquivos

df = pd.concat([df1 ,df2,df3,df4,df5])

#Exibindo as 5 linhas primeiras

df.head()

df.sample(5)

#Exibindo as 5 linhas primeiras

df.tail()

#Vereficando os dados da  coluna

df.dtypes

#Alterando dados da coluna
df["LojaID"] = df["LojaID"].astype("object")

#Vereficando os dados da  coluna

df.dtypes

df.head()

"""#Tratando valores faltando"""

#Consultando linhas com valores faltantes

df.isnull().sum()

#Transformando os valores nulos pela media

df["Venda"].fillna(df["Venda"].mean(), inplace = True)

df.isnull().sum()

#Substituido valores nulos para 0

df["Venda"].fillna (0, inplace = True)

#Apagando as linhas com valores nulos
df.dropna(inplace = True)

#Apagando as linhas com valores nulos com base apenas em 1
df.dropna(subset=["Venda"], inplace = True)

#Removendo linhas que estajam com valores faltantes em todas colunas
df.dropna(how="all" ,inplace = True)

"""#Criando novas colunas"""

#Criando uma nova coluna

df["Receita"]= df ["Venda"].mul(df["Qtde"])

df.head()

df["Receita/Venda"]= df["Receita"]/ df ["Venda"]

df.head()

#Retorando o maior valor da receita
df["Receita"].max()

#Retornando o menor valor da receita

df["Receita"].min()

#nlargest

df.nlargest(3,"Receita")

#nsmallest

df.nsmallest(3,"Receita")

df.groupby("Cidade")["Receita"].sum()

#Ordenando conjuntos de dados

df.sort_values("Receita" , ascending= False).head(10)

"""#**Trabalhando com datas**"""

#Transformando a coluna de data em tipo inteiro
df["Data"] = df["Data"].astype("object")

df.dtypes

#Transdormando coluna data em data
df["Data"] = pd.to_datetime(df["Data"])

df.dtypes

#Agrupamento por ano
df.groupby(df["Data"].dt.year)["Receita"].sum()

#Criando uma nova coluna
df["Ano_venda"] = df["Data"].dt.year

df.sample(5)

#Estraindo o mês e o dia
df["mes_venda"], df["dia_venda"] =(df["Data"].dt.month , df["Data"].dt.day)

df.sample(5)

#Retornando datas mais antigas
df["Data"].min()

df["diferenca_dias"]= df["Data"]-df["Data"].min()

df.sample(5)

#Filtrando as vendas de 2019 do mês de março
vendas_marco_19 = df.loc[(df["Data"].dt.year == 2019) & (df["Data"].dt.month == 3)]

vendas_marco_19

"""#**Visualização de dados**"""

df["LojaID"].value_counts(ascending = False)

#Grafico de barras
df["LojaID"].value_counts(ascending = False).plot.bar();

#Grafico de barras horizoltal
df["LojaID"].value_counts().plot.barh();

#Grafico Pizza
df.groupby(df["Data"].dt.year)["Receita"].sum().plot.pie();

df["Cidade"].value_counts()

#Adicionando um titulo e alterando o nome dos eixos
import matplotlib.pyplot as plt
df["Cidade"].value_counts().plot.bar(title = "Total de vendas por cidade")
plt.xlabel("Cidade")
plt.ylabel("Total de vendas");

#Alterando Cor
import matplotlib.pyplot as plt
df["Cidade"].value_counts().plot.bar(title = "Total de vendas por cidade" , color = "green")
plt.xlabel("Cidade")
plt.ylabel("Total de vendas");

#Alterando estilo
plt.style.use("ggplot")

df.groupby(df["mes_venda"])["Qtde"].sum().plot(title = "Total de produtos vendidos x mês")
plt.xlabel("Mês")
plt.ylabel("Total Produtos Vendidos")
plt.legend();

df.groupby(df["mes_venda"])["Qtde"].sum()

#Selecionando apenas vendas de 2019

df_2019 = df[df ["Ano_venda"] == 2019]

#Total de produtos vendidos por mês

df_2019.groupby(df_2019["mes_venda"])["Qtde"].sum().plot(marker = "v")
plt.xlabel("Mês")
plt.ylabel("Total Produtos Vendidos")
plt.legend();

#hisograma

plt.hist(df["Qtde"] , color = "magenta");

plt.scatter(x=df_2019["dia_venda"] , y =df_2019["Receita"] );

df_2019.groupby(df_2019["mes_venda"])["Qtde"].sum().plot(marker = "v")
plt.title = ("Total de produtos vendidos x mês")
plt.xlabel("Mês")
plt.ylabel("Total Produtos Vendidos")
plt.legend()
plt.savefig("grafico QTDE x MES.png")

